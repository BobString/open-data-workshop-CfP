{"name":"Open-data-workshop-cfp","tagline":"Files and links necessary for the open data workshop","body":"\r\n# Code For Princeton: Open Data Workshop\r\nFiles and links necessary for the open data workshop\r\n\r\n## Data files\r\n\r\nData from Jersey City Data Page: [Original link](http://www.cityofjerseycity.com/uploadedFiles/Data/JCPD%20Calls%20for%20Service%202014(1).xlsx) , [Mirror](https://github.com/BobString/open-data-workshop-CfP/blob/master/data/OriginalJCPDCallsforService2014.xlsx?raw=true)\r\n\r\nData in CSV format: [Link](https://raw.githubusercontent.com/BobString/open-data-workshop-CfP/master/data/OriginalJCPD2014.csv)\r\n\r\nDataset after OpenRefine recipe: [Link](https://raw.githubusercontent.com/BobString/open-data-workshop-CfP/master/data/CLEANJCPD2014v1.csv)\r\n\r\nCartoDB map: [http://cdb.io/1ehU4NB](http://cdb.io/1ehU4NB)\r\n\r\n\r\n## OpenRefine\r\n\r\nSome snippets used in OpenRefine\r\n\r\n### Geocoding\r\n\r\n1. Starting with a single address field `Edit Column > Add Column by Fetching URLs` Nominatim has a limit of 1 geocode per second so make sure to set the throttle delay to greater than 1000 milliseconds Fetch URL based on column (quotes needed):\r\n\r\n`\"http://nominatim.openstreetmap.org/search?format=json&email='EMAIL'&app=google-refine&q='\" + escape(value, 'url')`\r\n\r\n2. Extract lat/lon from newly created JSON column `Edit Column > Add Column based on This Column`. Parse the JSON and concatenate latitude, longitude:\r\n\r\n`with(value.parseJson()[0], pair, pair.lat + ',' + pair.lon)`\r\n\r\nSource: [Paul Bartsch GitHub](https://gist.github.com/pdbartsch/5987932)\r\n\r\n### Date conversion (not used)\r\n\r\n1. Transform Time Received and Time Dispached columns with `toDate(value,\"MM/dd/yyyy H:m:s\").toString(\"yyyy-dd-MM HH:mm:ss\").replace(\" \",\"T\")` to adapt it to the date format in CartoDb\r\n\r\n\r\n### Complete recipe\r\n\r\n```json\r\n[\r\n  {\r\n    \"op\": \"core/column-removal\",\r\n    \"description\": \"Remove column Column\",\r\n    \"columnName\": \"Column\"\r\n  },\r\n  {\r\n    \"op\": \"core/column-removal\",\r\n    \"description\": \"Remove column Column2\",\r\n    \"columnName\": \"Column2\"\r\n  },\r\n  {\r\n    \"op\": \"core/column-split\",\r\n    \"description\": \"Split column Call Code Description by separator\",\r\n    \"engineConfig\": {\r\n      \"facets\": [],\r\n      \"mode\": \"row-based\"\r\n    },\r\n    \"columnName\": \"Call Code Description\",\r\n    \"guessCellType\": true,\r\n    \"removeOriginalColumn\": true,\r\n    \"mode\": \"separator\",\r\n    \"separator\": \";\",\r\n    \"regex\": false,\r\n    \"maxColumns\": 0\r\n  },\r\n  {\r\n    \"op\": \"core/row-removal\",\r\n    \"description\": \"Remove rows\",\r\n    \"engineConfig\": {\r\n      \"facets\": [\r\n        {\r\n          \"expression\": \"value\",\r\n          \"invert\": true,\r\n          \"selectError\": false,\r\n          \"omitError\": false,\r\n          \"name\": \"Call Code Description 1\",\r\n          \"selectBlank\": false,\r\n          \"columnName\": \"Call Code Description 1\",\r\n          \"omitBlank\": false,\r\n          \"type\": \"list\",\r\n          \"selection\": [\r\n            {\r\n              \"v\": {\r\n                \"v\": \"HYDRANT PARKING VIOLATION\",\r\n                \"l\": \"HYDRANT PARKING VIOLATION\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      \"mode\": \"row-based\"\r\n    }\r\n  },\r\n  {\r\n    \"op\": \"core/column-removal\",\r\n    \"description\": \"Remove column Call Code Description 3\",\r\n    \"columnName\": \"Call Code Description 3\"\r\n  },\r\n  {\r\n    \"op\": \"core/column-removal\",\r\n    \"description\": \"Remove column Call Code Description 2\",\r\n    \"columnName\": \"Call Code Description 2\"\r\n  },\r\n  {\r\n    \"op\": \"core/column-removal\",\r\n    \"description\": \"Remove column Is Primary\",\r\n    \"columnName\": \"Is Primary\"\r\n  },\r\n  {\r\n    \"op\": \"core/mass-edit\",\r\n    \"description\": \"Mass edit cells in column Address\",\r\n    \"engineConfig\": {\r\n      \"facets\": [],\r\n      \"mode\": \"row-based\"\r\n    },\r\n    \"columnName\": \"Address\",\r\n    \"expression\": \"value\",\r\n    \"edits\": [\r\n      {\r\n        \"fromBlank\": false,\r\n        \"fromError\": false,\r\n        \"from\": [\r\n          \"third (3RD ST) & COLES ST;  \"\r\n        ],\r\n        \"to\": \"3RD ST & COLES ST;  \"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"op\": \"core/mass-edit\",\r\n    \"description\": \"Mass edit cells in column Address\",\r\n    \"engineConfig\": {\r\n      \"facets\": [],\r\n      \"mode\": \"row-based\"\r\n    },\r\n    \"columnName\": \"Address\",\r\n    \"expression\": \"value\",\r\n    \"edits\": [\r\n      {\r\n        \"fromBlank\": false,\r\n        \"fromError\": false,\r\n        \"from\": [\r\n          \"glennwood ave (GLENWOOD AVE) & KENNEDY BLVD;  \"\r\n        ],\r\n        \"to\": \"GLENWOOD AVE & KENNEDY BLVD;  \"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"op\": \"core/text-transform\",\r\n    \"description\": \"Text transform on cells in column Address using expression value.trim()\",\r\n    \"engineConfig\": {\r\n      \"facets\": [],\r\n      \"mode\": \"row-based\"\r\n    },\r\n    \"columnName\": \"Address\",\r\n    \"expression\": \"value.trim()\",\r\n    \"onError\": \"keep-original\",\r\n    \"repeat\": false,\r\n    \"repeatCount\": 10\r\n  },\r\n  {\r\n    \"op\": \"core/text-transform\",\r\n    \"description\": \"Text transform on cells in column Address using expression grel:value.replace(\\\";\\\",\\\"\\\")\",\r\n    \"engineConfig\": {\r\n      \"facets\": [],\r\n      \"mode\": \"row-based\"\r\n    },\r\n    \"columnName\": \"Address\",\r\n    \"expression\": \"grel:value.replace(\\\";\\\",\\\"\\\")\",\r\n    \"onError\": \"keep-original\",\r\n    \"repeat\": false,\r\n    \"repeatCount\": 10\r\n  },\r\n  {\r\n    \"op\": \"core/text-transform\",\r\n    \"description\": \"Text transform on cells in column Address using expression value.toTitlecase()\",\r\n    \"engineConfig\": {\r\n      \"facets\": [],\r\n      \"mode\": \"row-based\"\r\n    },\r\n    \"columnName\": \"Address\",\r\n    \"expression\": \"value.toTitlecase()\",\r\n    \"onError\": \"keep-original\",\r\n    \"repeat\": false,\r\n    \"repeatCount\": 10\r\n  },\r\n  {\r\n    \"op\": \"core/text-transform\",\r\n    \"description\": \"Text transform on cells in column Address using expression grel:value + \\\", Jersey City, New Jersey, USA\\\"\",\r\n    \"engineConfig\": {\r\n      \"facets\": [],\r\n      \"mode\": \"row-based\"\r\n    },\r\n    \"columnName\": \"Address\",\r\n    \"expression\": \"grel:value + \\\", Jersey City, New Jersey, USA\\\"\",\r\n    \"onError\": \"keep-original\",\r\n    \"repeat\": false,\r\n    \"repeatCount\": 10\r\n  },\r\n  {\r\n    \"op\": \"core/column-removal\",\r\n    \"description\": \"Remove column CITY\",\r\n    \"columnName\": \"CITY\"\r\n  },\r\n  {\r\n    \"op\": \"core/column-addition-by-fetching-urls\",\r\n    \"description\": \"Create column JSON Response at index 12 by fetching URLs based on column Address using expression grel:\\\"http://nominatim.openstreetmap.org/search?format=json&email='contact@robertmm.com'&app=google-refine&q='\\\" + escape(value, 'url')\",\r\n    \"engineConfig\": {\r\n      \"facets\": [],\r\n      \"mode\": \"row-based\"\r\n    },\r\n    \"newColumnName\": \"JSON Response\",\r\n    \"columnInsertIndex\": 12,\r\n    \"baseColumnName\": \"Address\",\r\n    \"urlExpression\": \"grel:\\\"http://nominatim.openstreetmap.org/search?format=json&email='contact@robertmm.com'&app=google-refine&q='\\\" + escape(value, 'url')\",\r\n    \"onError\": \"set-to-blank\",\r\n    \"delay\": 2000\r\n  },\r\n  {\r\n    \"op\": \"core/column-addition\",\r\n    \"description\": \"Create column Lat & Lon at index 13 based on column JSON Response using expression grel:with(value.parseJson()[0], pair, pair.lat + ',' + pair.lon)\",\r\n    \"engineConfig\": {\r\n      \"facets\": [],\r\n      \"mode\": \"row-based\"\r\n    },\r\n    \"newColumnName\": \"Lat & Lon\",\r\n    \"columnInsertIndex\": 13,\r\n    \"baseColumnName\": \"JSON Response\",\r\n    \"expression\": \"grel:with(value.parseJson()[0], pair, pair.lat + ',' + pair.lon)\",\r\n    \"onError\": \"set-to-blank\"\r\n  },\r\n  {\r\n    \"op\": \"core/column-removal\",\r\n    \"description\": \"Remove column Time Arrived\",\r\n    \"columnName\": \"Time Arrived\"\r\n  },\r\n  {\r\n    \"op\": \"core/column-move\",\r\n    \"description\": \"Move column Time Dispatched to position 3\",\r\n    \"columnName\": \"Time Dispatched\",\r\n    \"index\": 3\r\n  },\r\n  {\r\n    \"op\": \"core/column-removal\",\r\n    \"description\": \"Remove column JSON Response\",\r\n    \"columnName\": \"JSON Response\"\r\n  },\r\n  {\r\n    \"op\": \"core/column-split\",\r\n    \"description\": \"Split column Lat & Lon by separator\",\r\n    \"engineConfig\": {\r\n      \"facets\": [],\r\n      \"mode\": \"row-based\"\r\n    },\r\n    \"columnName\": \"Lat & Lon\",\r\n    \"guessCellType\": true,\r\n    \"removeOriginalColumn\": true,\r\n    \"mode\": \"separator\",\r\n    \"separator\": \",\",\r\n    \"regex\": false,\r\n    \"maxColumns\": 0\r\n  },\r\n  {\r\n    \"op\": \"core/column-rename\",\r\n    \"description\": \"Rename column Lat & Lon 1 to lat\",\r\n    \"oldColumnName\": \"Lat & Lon 1\",\r\n    \"newColumnName\": \"lat\"\r\n  },\r\n  {\r\n    \"op\": \"core/column-rename\",\r\n    \"description\": \"Rename column Lat & Lon 2 to lon\",\r\n    \"oldColumnName\": \"Lat & Lon 2\",\r\n    \"newColumnName\": \"lon\"\r\n  }\r\n]\r\n``` \r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}